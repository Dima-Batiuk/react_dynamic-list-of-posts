{"version":3,"sources":["components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","api/api.js","api/posts.js","api/comments.js","components/PostDetails/PostDetails.jsx","App.jsx","api/users.js","index.js"],"names":["PostsList","posts","selectedPost","selectedPostId","className","map","post","key","id","userId","title","type","classNames","button_active","onClick","NewCommentForm","onAdd","useState","newName","setName","newEmail","setEmail","newBody","setBody","clear","onSubmit","event","preventDefault","name","placeholder","value","required","onChange","target","BASE_URL","get","url","options","a","fetch","then","response","json","result","data","getPosts","deleteComment","commentId","method","addComment","comment","headers","body","JSON","stringify","PostDetails","setSelectedPost","comments","setComments","isVisible","setVisible","useEffect","postId","getPostComments","length","filter","email","currentComment","App","users","setUsers","setPosts","setSelectedPostId","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8ddd4a97.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const PostsList = ({ posts, selectedPost, selectedPostId }) => (\n  <>\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      {posts !== [] ? (\n        <ul className=\"PostsList__list\">\n          {posts.map(post => (\n            <li\n              className=\"PostsList__item\"\n              key={post.id}\n            >\n              <div>\n                <b>{`User #${post.userId}: `}</b>\n                {post.title}\n              </div>\n\n              <button\n                type=\"button\"\n                className={classNames(\n                  'PostsList__button',\n                  'button',\n                  { button_active: selectedPostId === post.id },\n                )}\n                onClick={() => selectedPost(post.id)}\n              >\n                {selectedPostId === post.id\n                  ? 'Close'\n                  : 'Open'\n                }\n              </button>\n            </li>\n          ))}\n        </ul>\n      )\n        : (\n          <h2>No posts in selected User</h2>)\n        }\n    </div>\n\n  </>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      userId: PropTypes.number.isRequired,\n    }).isRequired,\n  ).isRequired,\n  selectedPost: PropTypes.func.isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport PropTypes from 'prop-types';\n\nexport const NewCommentForm = ({ onAdd }) => {\n  const [newName, setName] = useState('');\n  const [newEmail, setEmail] = useState('');\n  const [newBody, setBody] = useState('');\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    onAdd(newName, newEmail, newBody);\n\n    clear();\n  };\n\n  const clear = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <>\n      <form\n        className=\"NewCommentForm\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"form-field\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Your name\"\n            value={newName}\n            required\n            onChange={event => (\n              setName(event.target.value)\n            )}\n            className=\"NewCommentForm__input\"\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={newEmail}\n            required\n            onChange={event => (\n              setEmail(event.target.value)\n            )}\n            placeholder=\"Your email\"\n            className=\"NewCommentForm__input\"\n          />\n        </div>\n\n        <div className=\"form-field\">\n          <textarea\n            name=\"body\"\n            value={newBody}\n            placeholder=\"Type comment here\"\n            required\n            onChange={event => (\n              setBody(event.target.value)\n            )}\n            className=\"NewCommentForm__input\"\n          />\n        </div>\n\n        <button\n          type=\"submit\"\n          className=\"NewCommentForm__submit-button button\"\n        >\n          Add a comment\n        </button>\n      </form>\n\n    </>\n  );\n};\n\nNewCommentForm.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const get = async(url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then(response => response.json())\n  .then(result => result.data);\n\nexport function remove(url, id) {\n  return fetch(`${BASE_URL}${url}/${id}`, {\n    method: 'DELETE',\n  });\n}\n\nexport function post(url, data) {\n  return get(url, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(data),\n  });\n}\n","import { get } from './api';\n\nexport const getPosts = () => get('/posts');\nexport const getUserPosts = userId => (get(`/posts?userId=${userId}`));\nexport const getPostDetails = postId => (get(`/posts/${postId}`));\n","import { get, post, remove } from './api';\n\nexport const getPostComments = postId => (get(`/comments?postId=${postId}`));\nexport const deleteComment = commentId => (remove('/comments/', commentId));\nexport const addComment = comment => (post('/comments', comment));\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostDetails } from '../../api/posts';\n\nimport './PostDetails.scss';\nimport { addComment, deleteComment, getPostComments } from '../../api/comments';\n\nexport const PostDetails = ({ selectedPostId }) => {\n  const [selectedPost, setSelectedPost] = useState(null);\n  const [comments, setComments] = useState(null);\n  const [isVisible, setVisible] = useState(true);\n\n  useEffect(() => {\n    getPostDetails(selectedPostId)\n      .then(setSelectedPost);\n\n    setComments(null);\n\n    getPostComments(selectedPostId)\n      .then(setComments);\n  }, [selectedPostId]);\n\n  const handleVisibleChange = () => setVisible(!isVisible);\n  const onDelete = (commentId) => {\n    deleteComment(commentId)\n      .then(() => setComments(comments.filter(\n        comment => commentId !== comment.id,\n      )));\n  };\n\n  const addNewComment = (name, email, body) => {\n    const commentBody = {\n      name,\n      email,\n      body,\n      postId: selectedPostId,\n    };\n\n    addComment(commentBody)\n      .then((result) => {\n        setComments(currentComment => [...currentComment, result]);\n      });\n  };\n\n  return (\n\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      {selectedPost !== null && (\n        <section className=\"PostDetails__post\">\n          <p>{selectedPost.title}</p>\n        </section>\n      )}\n\n      {comments && (\n        <>\n          <section className=\"PostDetails__comments\">\n            {comments.length !== 0 ? (\n              <button\n                type=\"button\"\n                className=\"button\"\n                onClick={handleVisibleChange}\n              >\n                {isVisible\n                  ? `Hide ${comments.length} comments`\n                  : 'Show comments'\n                      }\n\n              </button>\n            )\n              : (\n                <h3>No comments yet</h3>\n              )\n            }\n            {isVisible && (\n              <ul className=\"PostDetails__list\">\n                {comments.map(comment => (\n                  <li\n                    className=\"PostDetails__list-item\"\n                    key={comment.id}\n                  >\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => onDelete(comment.id)}\n                    >\n                      X\n                    </button>\n                    <p>{comment.body}</p>\n                  </li>\n                ))}\n\n              </ul>\n            )}\n\n          </section>\n        </>\n      )\n      }\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm onAdd={addNewComment} />\n        </div>\n      </section>\n    </div>\n\n  );\n};\n\nPostDetails.propTypes = {\n  selectedPostId: PropTypes.number.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPosts, getUserPosts } from './api/posts';\nimport { getUsers } from './api/users';\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n  const [posts, setPosts] = useState([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  useEffect(() => {\n    getPosts().then(setPosts);\n    getUsers().then(setUsers);\n  }, []);\n\n  const handleSelectChange = ({ target }) => {\n    if (+target.value === 0) {\n      getPosts().then(setPosts);\n    }\n\n    getUserPosts(+target.value).then(setPosts);\n  };\n\n  const selectedPost = (postId) => {\n    if (postId === selectedPostId) {\n      return setSelectedPostId(0);\n    }\n\n    return setSelectedPostId(postId);\n  };\n\n  return (\n    <>\n      <div className=\"App\">\n        <header className=\"App__header\">\n          <label>\n            Select a user: &nbsp;\n\n            <select\n              className=\"App__user-selector\"\n              onChange={handleSelectChange}\n            >\n              <option\n                value=\"0\"\n              >\n                All users\n              </option>\n              {users.map(user => (\n                <option\n                  value={user.id}\n                  key={user.id}\n                >\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n        </header>\n\n        <main className=\"App__main\">\n          <div className=\"App__sidebar\">\n            <PostsList\n              posts={posts}\n              selectedPost={selectedPost}\n              selectedPostId={selectedPostId}\n            />\n          </div>\n\n          <div className=\"App__content\">\n            {selectedPostId\n              ? (\n                <PostDetails selectedPostId={selectedPostId} />\n              )\n              : (<h2>Open post to see details</h2>)\n            }\n          </div>\n        </main>\n      </div>\n\n    </>\n  );\n};\n\nexport default App;\n","import { get } from './api';\n\nexport const getUsers = () => get('/users');\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}